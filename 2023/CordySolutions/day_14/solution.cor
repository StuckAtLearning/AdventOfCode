fn parse_input(input_file) {
    let input = input_file . read_text . split('\n')
    return (input, input.len, input[0].len)
}

fn tilt_board(separated, length) {
    let tilted = []
    for row in separated {
        let tilted_row = list()
        for group in row {
            if group != '' {
                let rock_count = group.filter(=='O').len
                let space_count = group.filter(=='.').len
                tilted_row.push((rock_count * 'O')+(space_count * '.'))
            }
            else {
                tilted_row.push('')
            }
        }
        tilted.push(tilted_row.join('#'))
    }
    return tilted
}

fn get_load(tilted) {
    let load_sum = 0
    for level_num, row in enumerate(tilted.split('\n').reverse) {
        load_sum += (level_num+1) * (row.filter(=='O').len)
    }
    return load_sum
}

fn part_1(input, length) {
    let separated = input . zip . map(join('')) . map(split('#')) // tilt north
    // separated.print
    let tilted_north = tilt_board(separated, length)
    // tilted_north.print
    return get_load(tilted_north.zip.map(fn(x) -> x.list.join('')).join('\n'))
}

fn part_2(input, length) {
    let tilted = input
    let rotated = list()
    for i in range(1000) {
        // tilt north
        rotated = tilted . zip . map(join('')) . map(split('#')) // rotate to operate north tilt
        tilted = tilt_board(rotated, length) . zip . map(fn(x) -> x.join('')) // tilting

        // tilt west
        rotated = tilted . map(split('#')) // rotate to operate west tilt
        tilted = tilt_board(rotated, length) // tilting

        // tilt south
        rotated = tilted . reverse . zip . map(join('')) . map(split('#')) // rotate to operate south tilt
        tilted = tilt_board(rotated, length) . zip . map(fn(x) -> x . join('')) . reverse //  tilting

        // tilt east
        rotated = tilted . map(fn(x) -> x . reverse . join('') . split('#')) // rotate to operate east tilt
        tilted = tilt_board(rotated, length) . map(fn(x) -> x . reverse . join(''))// tilting
    }
    
    return get_load(tilted.join('\n'))
}


fn main() {
    let input, length, width = parse_input('real_input.txt')
    part_1(input, length) . print
    part_2(input, length) . print
}

main()