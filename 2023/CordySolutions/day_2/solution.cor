fn parse_gane_info(input_file) {
    let parsed_game_info = dict()
    let game_info = input_file . read_text . split('\n') . map(split(': '))

    for game_id, cube_info in game_info {
        let _, game_id_num = game_id . split(' ')

        parsed_game_info[game_id_num . int] = cube_info 
        . split('; ') . map(fn(game_set) -> game_set
            . split(', ') . map(fn(cubes) -> cubes 
                . split(' ') . (fn((count, color)) -> (color, int count))))
    }
    return parsed_game_info
}

fn part_1(game_records) {
    let cubes_info = {'red': 12, 'green': 13, 'blue': 14}
    let possible_game_id_sum = 0
    for game_id, records in game_records {
        possible_game_id_sum += 
            if records . map(fn(game_set) -> game_set . any(fn((colour, count)) -> cubes_info[colour] < count)) . all(!) 
            then game_id else 0
    }
    return possible_game_id_sum
}

fn part_2(game_records) {
    let possible_game_power = 0
    for _, records in game_records {
        let minimum_cube_info = {'red': 0, 'green': 0, 'blue': 0}
        records . map(fn(game_set) -> game_set . map(fn((colour, count)) -> minimum_cube_info[colour] max= count))
        possible_game_power += (minimum_cube_info . values) . reduce(*)
    }
    return possible_game_power
}

fn main() {
    let game_records = parse_gane_info('real_input.txt')
    part_1(game_records) . print
    part_2(game_records) . print
}

main()