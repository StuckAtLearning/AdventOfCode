fn parse_gane_info(input_file) {
    let parsed_game_info = dict()
    let game_info = input_file . read_text . split ('\n') . map(split(': '))

    for game_id, cube_info in game_info {
        let game_id_num = game_id . split(' ') . [-1] . int
        parsed_game_info[game_id_num] = []

        for each_set in cube_info . split('; ') {
            let current_set = dict()
            let cubes = each_set . split(', ')
            for cube in cubes {
                let cube_num, cube_colour = cube . split(' ')
                current_set[cube_colour] = cube_num . int
            }
            parsed_game_info[game_id_num].push(current_set)
        }
    }
    return parsed_game_info
}

fn part_1(game_records) {
    let cubes_info = {'red': 12, 'green': 13, 'blue': 14}
    let possible_game_id_sum = 0
    for game_id, records in game_records {
        let possible_game_flag = true
        for record in records { // {'blue': 3, 'red': 4}
            for colour, count in record {
                if cubes_info[colour] < count {
                    possible_game_flag = false
                }
            }
        }
        if possible_game_flag {
            possible_game_id_sum += game_id
        }
    }
    return possible_game_id_sum
}

fn part_2(game_records) {
    let possible_game_power = 0
    for _, records in game_records {
        let minimum_cube_info = {'red': 0, 'green': 0, 'blue': 0}
        for record in records {
            for colour, count in record {
                minimum_cube_info[colour] max= count
            }
        }
        possible_game_power += (minimum_cube_info . values) . reduce(*)
    }
    return possible_game_power
}

fn main() {
    let game_records = parse_gane_info('real_input.txt')
    part_1(game_records) . print
    part_2(game_records) . print
}

main()
