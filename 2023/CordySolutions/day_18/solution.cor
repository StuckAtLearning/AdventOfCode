fn parse_input(input_file) -> 
    input_file . read_text . split('\n') . map(split(' ')) 
    . map(fn((x, y, z)) -> (
        if x == 'R' then (0, 1) else if x == 'L' then (0, -1) else if x == 'D' then (1, 0) else (-1, 0), 
        y.int, 
        z.replace('\(|\)', '')
        )
    ) 

// if returns true, then can assume starting direction's right-hand-side is inside the loop
fn get_orientation(input) {
    let degree = 0 // assume the right hand side of the starting position (R) is inside of the loop
    let previous_direction = (0, 1) // assume we start with R
    for direction, _, _ in input[1:] {
        if previous_direction == direction {
            print('probably never? or else, concerned?')
            continue
        }
        elif previous_direction[0] == 0 { // going left or right
            if direction[0] == 1 { // going down now
                degree
            }
            degree += (direction[0]*previous_direction[1]) * 90
        }
        elif previous_direction[1] == 0 { //going up or down 
            degree += (direction[1]*previous_direction[0]) * 90
        }
        previous_direction = direction
    }
    return degree > 0
}

fn assign_coords(input) {
    let border_count = 0
    let current_coord = (0, 0)
    let coords = list()
    for direction, step_num, _ in input {
        let next_coord = direction*step_num + current_coord
        coords.push((direction, (current_coord, next_coord)))
        current_coord = next_coord

        if direction == (0, 1) or direction == (1, 0) {
            border_count += step_num
        }
    }
    return (coords, border_count)
}

fn shift_coords(coords) {
    let left_most_index = coords . map(fn((_, ((_, column), _))) -> column) . min
    let bottom_most_index = coords . map(fn((_, ((row, _), _))) -> row) . max

    let shifted_coords = coords . map(fn((d, ((s_r, s_c), (e_r, e_c)))) -> 
        (d, (
            (bottom_most_index - s_r, s_c + (0-left_most_index)),
            (bottom_most_index - e_r, e_c + (0-left_most_index))
            )
        )
    )
    return shifted_coords
}

fn get_horizontal_coords_and_shadow_direction(shifted_coords, orientation) {
    let add_coords = list()
    let subtract_coords = list()
    let border_count = 0
    for direction, (start, end) in shifted_coords {
        if direction[1] == 1 { // going right
            add_coords.push((start, end))
        }
        elif direction[1] == -1 { // going left
            subtract_coords.push((start, end))
        }
    }
    return (add_coords, subtract_coords)
}

fn calculate_area(add_coords, subtract_coords, border_count) {
    let total_area = border_count
    for start, end in add_coords {
        let height = start[0]
        let width = abs(start[1]-end[1])
        total_area += (height * width)
    }
    for start, end in subtract_coords {
        let height = start[0]
        let width = abs(start[1]-end[1])
        total_area -= (height * width)
    }
    return total_area
}

fn get_all_areas(input) {
    let orientation = get_orientation(input)
    let coords, border_count = assign_coords(input)
    let shifted_coords = shift_coords(coords)
    let add_coords, subtract_coords = get_horizontal_coords_and_shadow_direction(shifted_coords, orientation)
    return calculate_area(add_coords, subtract_coords, border_count) + 1
}

fn part_1(input) -> get_all_areas(input)

fn part_2(input) {
    let real_input = input . map(fn((_, _, x)) -> 
        (
            if x[-1] == '0' then (0, 1) 
            else if x[-1] == '1' then (1, 0)
            else if x[-1] == '2' then (0, -1)
            else (-1, 0), 
            ('0x'+x[1:-1]).eval.int,
            'temp_spacer'
        )
    )
    return get_all_areas(real_input)
}

fn main() {
    let input = parse_input('real_input.txt')
    part_1(input) . print
    part_2(input) . print
}

main()