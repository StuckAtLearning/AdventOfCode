fn reassign_list_cause_cordy_bad(value_index, new_value, input_list) -> 
    input_list[:value_index] + [new_value] + input_list[(value_index+1):]



fn michael_buble_merry_christmas_snort(input_list) {
    let j = 0
    loop {
        if j == input_list . len {
            break
        }

        let i = 1
        loop {

            // debug print
            //[i, j, input_list . len] . print

            
            let min_element = [input_list[i-1], input_list[i]] . min
            let max_element = [input_list[i-1], input_list[i]] . max
        
            // Used before List Ass was Done
            // input_list = input_list
            //     .reassign_list_cause_cordy_bad(i, min_element)
            //     .reassign_list_cause_cordy_bad(i+1, max_element)

            input_list[i - 1] = min_element
            input_list[i] = max_element
            
            i += 1

            if i == (input_list . len) {
                break
            }

            // debug statement
    	    // if i > 10 { return }
            
        }

    j += 1

    }
    // return input_list 
    // but someone is anal
    input_list
}


michael_buble_merry_christmas_snort([4, 2, 5, 8, 0, -1, -1]) . print

